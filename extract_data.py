from lxml import etree
import os
from pprint import pformat
from jinja2 import Template
import rule_parsing

from Types import HKItemData

resources = os.path.join("RandomizerLib3.0", "Resources")
game_options = {"MILDSKIPS", "SPICYSKIPS", "FIREBALLSKIPS", "NOTCURSED", "ACIDSKIPS", "SPIKETUNNELS",
                "DARKROOMS", "CURSED", "SHADESKIPS"}

def sort_macros(unsorted_macros):
    macros = {}
    # prevent replacing "DASH" within "SUPERDASH" and other substrings
    for key, value in sorted(unsorted_macros.items(), key=lambda key_value_pair: -len(key_value_pair[0])):
        macros[key] = value
    return macros

HK_ID_OFFSET = 0x1000000
HK_LOC_ID_OFFSET = 0x1100000

parser = etree.XMLParser(remove_comments=True)
macros_tree = etree.XML(open(os.path.join(resources, "macros_simple.xml"), encoding="utf-8-sig").read(), parser=parser)

macros = {}
additives = {}

additives_tree = etree.XML(open(os.path.join(resources, "additive.xml"), encoding="utf-8-sig").read(), parser=parser)

for itemset in additives_tree:
    items = []
    for item in itemset:
        items.append(item.text)
    if len(items) > 1:
        additives[itemset.get("name")] = "("+" | ".join(items)+")"
    else:
        additives[itemset.get("name")] = items[0]

additives = sort_macros(additives)


for macro in macros_tree:
    text = macro.text
    macros[macro.get("name")] = text

macros.update(additives)

for macro in macros:
    assert macro not in game_options

macros = sort_macros(macros)

waypoints_tree = etree.XML(open(os.path.join(resources, "waypoints.xml"), encoding="utf-8-sig").read(), parser=parser)#

class WayPointConnector():
    def __init__(self, name):
        self.name = name
        self.connections = []

waypoints = {}
for macro in waypoints_tree:
    logic_text = ""
    for logic in macro:
        if logic.tag == "itemLogic":
            logic_text = logic.text
    # waypoints[macro.get("name")] = split_or_conditions(logic_text)
    waypoints[macro.get("name")] = logic_text

macros.update(waypoints)

tree = etree.XML(open(os.path.join(resources, "items.xml"), encoding="utf-8-sig").read(), parser=parser)

translation = {"progression": "advancement",
               "pool": "type"}

bool_types = {"progression"}

conditions = {}

location_translation = {"x": "x",
                        "y": "y",
                        "sceneName": "scene"}

default = {"advancement": False, "type": None}
default_location = {"x": 0, "y": 0, "scene": None}

items = {}
locations = {}

current_id_offset = 0

for element in tree:
    current_id_offset += 1
    name = element.get("name")
    current_item = default.copy()
    fake = False
    condition_text = ""
    for attr in element:
        tag = attr.tag
        if tag in translation:
            if tag in bool_types:
                current_item[translation[tag]] = attr.text == 'true'
            else:
                current_item[translation[tag]] = attr.text
        elif tag == "itemLogic" and attr.text:
            condition_text = attr.text


    if condition_text:
        conditions[name] = condition_text
    items[name] = current_item
    if current_item["type"] != "Fake":
        current_location = locations[HK_LOC_ID_OFFSET+current_id_offset] = name  # default_location.copy()
    current_item["id"] = HK_ID_OFFSET+current_id_offset


items = {name: HKItemData(**item) for name, item in items.items()}

parse, parse_segmented = rule_parsing.create_parser(macros, game_options, items, waypoints)

conditions = {condition_name: parse(condition_text) for condition_name, condition_text in conditions.items()}

waypoints = {waypoint_name: parse(condition_text) for waypoint_name, condition_text in waypoints.items()}

info="""# generated by https://github.com/Berserker66/HollowKnight.RandomizerMod/blob/master/extract_data.py
# do not edit manually"""
common = {
    "info": info,
    "conditions": conditions,
    "waypoints": waypoints
}

for waypoint_name in waypoints:
    items[waypoint_name] = HKItemData(type="Event", advancement=True, id=0)
items["Hollow Knight"] = HKItemData(type="Event", advancement=True, id=0)

item_template = Template(open(os.path.join("Templates", "Items.py")).read()).render(items=pformat(items, indent=4), **common)
with open("Items.py", "wt") as f:
    f.write(item_template)

loc_template = Template(open(os.path.join("Templates", "Locations.py")).read()).render(locations=pformat(locations, indent=4), **common)
with open("Locations.py", "wt") as f:
    f.write(loc_template)

rules_template = Template(open(os.path.join("Templates", "Rules.py")).read()).render(**common)
with open("Rules.py", "wt") as f:
    f.write(rules_template)

regions_template = Template(open(os.path.join("Templates", "Regions.py")).read()).render(**common)
with open("Regions.py", "wt") as f:
    f.write(regions_template)


print("Succesfully extracted data.")